/*

Preserves orignal formatting

 */
/* declarations can exist inside atrules */
@font-face {
  font-family: 'Test font';
}

/* comment before rule */
body/* comment after rule name */{
    /* comment before decl */
    padding /*  comment after prop */ : /*  comment before val */ {{?!it.rtl}}0  1px  2px  3px {{??}}0 /*  comment after val */ 3px /* another comment */ 2px /* one more */ 1px /* last one*/{{?}};
    /* comment after decl */

    margin:
        {{?!it.rtl}}0 
        1px 
        2px 
        3px {{??}}0 /*top*/
        3px /*right
        multi-line
        comment
        */
        2px /*bottom*/
        1px /*left*/{{?}};

    {{?!it.rtl}}border-left{{??}}border-right{{?}}/*  comment after prop */: none;
}

/* empty options forces defaults */
/* should not process urls - default */
@import url("rtl-right-east.css");
div:before { content: {{?!it.rtl}}"A"{{??}}"ABC"{{?}};} div:after { content: {{?!it.rtl}}"ABC"{{??}}"A"{{?}};}

{{?!it.rtl}}.demo-prev, .demo-Prev, .demo-PREV{{??}}.demo-next, .demo-Next, .demo-NEXT{{?}} { content: 'p'; }
{{?!it.rtl}}.demo-next, .demo-Next, .demo-NEXT{{??}}.demo-prev, .demo-Prev, .demo-PREV{{?}} { content: 'n'; }


div {
  text-align: {{?!it.rtl}}right{{??}}left{{?}};
  padding: 10px;
}
.sample {
    text-align: left;
}
.right { display:inline;}
/*rtl:begin:options:{"autoRename":true, "greedy": true}*/
{{?!it.rtl}}.bright{{??}}.bleft{{?}} { display:inline;}
/*rtl:end:options*/
.brighter { display:inline;}

/* auto rename only if a pair exists */

/* The following should not be renamed */
.ltr{ display: inline-flex;}

/* But these should */
{{?!it.rtl}}.right{{??}}.left{{?}}{ display: inline-flex;}
{{?!it.rtl}}.left{{??}}.right{{?}} { display: block;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlucHV0LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBQ0gsMkNBQTJDO0FBQzNDO0VBQ0UseUJBQXlCO0NBQzFCOztBQUVELHlCQUF5QjtBQUN6QjtJQUNJLHlCQUF5QjtJQUN6QixnTUFBd0o7SUFDeEosd0JBQXdCOztJQUV4Qjs7Ozs7Ozs7OzswQkFPaUI7O0lBRWpCLDhFQUEyQztDQUM5Qzs7QUFFRCxtQ0FBbUM7QUFFbkMsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQXdDbEMsYUFBYSx5Q0FBYSxDQUFDLENBQUMsWUFBWSx5Q0FBZSxDQUFDOztBQUV4RCw4RkFBcUMsYUFBYSxFQUFFO0FBQ3BELDhGQUFxQyxhQUFhLEVBQUU7OztBQVlwRDtFQUdFLDZDQUFrQjtFQUNsQixjQUFjO0NBQ2Y7QUFHRDtJQUNJLGlCQUFpQjtDQUNwQjtBQUtELFNBQVMsZUFBZSxDQUFDO0FBQ3pCLHlEQUF5RDtBQUN6RCx1Q0FBVSxlQUFlLENBQUM7QUFDMUIsbUJBQW1CO0FBQ25CLFlBQVksZUFBZSxDQUFDOztBQUc1Qix1Q0FBdUM7O0FBSXZDLHlDQUF5QztBQUN6QyxNQUFNLHFCQUFxQixDQUFDOztBQUU1QixzQkFBc0I7QUFDdEIsb0NBQVEscUJBQXFCLENBQUM7QUFDOUIscUNBQVEsZUFBZSxDQUFDIiwiZmlsZSI6ImlucHV0LnJ0bC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXG5QcmVzZXJ2ZXMgb3JpZ25hbCBmb3JtYXR0aW5nXG5cbiAqL1xuLyogZGVjbGFyYXRpb25zIGNhbiBleGlzdCBpbnNpZGUgYXRydWxlcyAqL1xuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiAnVGVzdCBmb250Jztcbn1cblxuLyogY29tbWVudCBiZWZvcmUgcnVsZSAqL1xuYm9keS8qIGNvbW1lbnQgYWZ0ZXIgcnVsZSBuYW1lICove1xuICAgIC8qIGNvbW1lbnQgYmVmb3JlIGRlY2wgKi9cbiAgICBwYWRkaW5nIC8qICBjb21tZW50IGFmdGVyIHByb3AgKi8gOiAvKiAgY29tbWVudCBiZWZvcmUgdmFsICovIDAgLyogIGNvbW1lbnQgYWZ0ZXIgdmFsICovIDFweCAvKiBhbm90aGVyIGNvbW1lbnQgKi8gMnB4IC8qIG9uZSBtb3JlICovIDNweCAvKiBsYXN0IG9uZSovO1xuICAgIC8qIGNvbW1lbnQgYWZ0ZXIgZGVjbCAqL1xuXG4gICAgbWFyZ2luOlxuICAgICAgICAwIC8qdG9wKi9cbiAgICAgICAgMXB4IC8qcmlnaHRcbiAgICAgICAgbXVsdGktbGluZVxuICAgICAgICBjb21tZW50XG4gICAgICAgICovXG4gICAgICAgIDJweCAvKmJvdHRvbSovXG4gICAgICAgIDNweCAvKmxlZnQqLztcblxuICAgIGJvcmRlci1sZWZ0LyogIGNvbW1lbnQgYWZ0ZXIgcHJvcCAqLzogbm9uZTtcbn1cblxuLyogZW1wdHkgb3B0aW9ucyBmb3JjZXMgZGVmYXVsdHMgKi9cbi8qcnRsOmJlZ2luOm9wdGlvbnM6IHt9Ki9cbi8qIHNob3VsZCBub3QgcHJvY2VzcyB1cmxzIC0gZGVmYXVsdCAqL1xuQGltcG9ydCB1cmwoXCJydGwtcmlnaHQtZWFzdC5jc3NcIik7XG4vKnJ0bDplbmQ6b3B0aW9ucyovXG5cbi8qcnRsOmJlZ2luOmNvbmZpZzpcbntcbiAgICBcIm9wdGlvbnNcIjp7XG4gICAgICAgIFwiYXV0b1JlbmFtZVwiOiB0cnVlLFxuICAgICAgICBcInN0cmluZ01hcFwiOltcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgIFwibmFtZVwiICAgIDogXCJwcmV2LW5leHRcIixcbiAgICAgICAgICAgIFwic2VhcmNoXCIgIDogW1wicHJldlwiLCBcIlByZXZcIiwgXCJQUkVWXCJdLFxuICAgICAgICAgICAgXCJyZXBsYWNlXCIgOiBbXCJuZXh0XCIsIFwiTmV4dFwiLCBcIk5FWFRcIl0sXG4gICAgICAgICAgICBcIm9wdGlvbnNcIiA6IHtcImlnbm9yZUNhc2VcIjpmYWxzZX1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAgXCJwbHVnaW5zXCI6W1xuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJ0ZXN0XCIsXG4gICAgICAgIFwiZGlyZWN0aXZlc1wiOntcbiAgICAgICAgICBcImNvbnRyb2xcIjoge30sXG4gICAgICAgICAgXCJ2YWx1ZVwiOiBbXVxuICAgICAgICB9LFxuICAgICAgICBcInByb2Nlc3NvcnNcIjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImNvbnRlbnRcIixcbiAgICAgICAgICAgIFwiZXhwclwiOiAvY29udGVudC9pbSxcbiAgICAgICAgICAgIFwiYWN0aW9uXCI6IGZ1bmN0aW9uIChwcm9wLCB2YWx1ZSwgY3h0KSB7XG4gICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gJ1wiQVwiJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB7ICdwcm9wJzogcHJvcCwgJ3ZhbHVlJzogJ1wiQUJDXCInIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJ1wiQUJDXCInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgJ3Byb3AnOiBwcm9wLCAndmFsdWUnOiAnXCJBXCInIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4geyAncHJvcCc6IHByb3AsICd2YWx1ZSc6IHZhbHVlIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICBdXG59Ki9cbmRpdjpiZWZvcmUgeyBjb250ZW50OiBcIkFcIjt9IGRpdjphZnRlciB7IGNvbnRlbnQ6IFwiQUJDXCI7fVxuXG4uZGVtby1wcmV2LCAuZGVtby1QcmV2LCAuZGVtby1QUkVWIHsgY29udGVudDogJ3AnOyB9XG4uZGVtby1uZXh0LCAuZGVtby1OZXh0LCAuZGVtby1ORVhUIHsgY29udGVudDogJ24nOyB9XG5cbi8qcnRsOmVuZDpjb25maWcqL1xuXG4vKiFydGw6YmVnaW46cmVtb3ZlKi9cbkBpbXBvcnQgdXJsKC90ZXN0LmNzcyk7XG5pIHtcbiAgY29sb3I6IGJsdWU7ICBcbn1cbi8qcnRsOmVuZDpyZW1vdmUqL1xuXG5cbmRpdiB7XG4gIC8qcnRsOnJlbW92ZSovXG4gIGRpcmVjdGlvbjogcnRsO1xuICB0ZXh0LWFsaWduOiByaWdodDtcbiAgcGFkZGluZzogMTBweDtcbn1cblxuLypydGw6YmVnaW46aWdub3JlKi9cbi5zYW1wbGUge1xuICAgIHRleHQtYWxpZ246IGxlZnQ7XG59XG4vKnJ0bDplbmQ6aWdub3JlKi9cblxuXG4vKnJ0bDpiZWdpbjpvcHRpb25zOntcImF1dG9SZW5hbWVcIjpmYWxzZSwgXCJjbGVhblwiOiBmYWxzZX0qL1xuLnJpZ2h0IHsgZGlzcGxheTppbmxpbmU7fVxuLypydGw6YmVnaW46b3B0aW9uczp7XCJhdXRvUmVuYW1lXCI6dHJ1ZSwgXCJncmVlZHlcIjogdHJ1ZX0qL1xuLmJyaWdodCB7IGRpc3BsYXk6aW5saW5lO31cbi8qcnRsOmVuZDpvcHRpb25zKi9cbi5icmlnaHRlciB7IGRpc3BsYXk6aW5saW5lO31cbi8qcnRsOmVuZDpvcHRpb25zKi9cblxuLyogYXV0byByZW5hbWUgb25seSBpZiBhIHBhaXIgZXhpc3RzICovXG5cbi8qcnRsOmJlZ2luOm9wdGlvbnM6e1wiYXV0b1JlbmFtZVwiOnRydWUsIFwiYXV0b1JlbmFtZVN0cmljdFwiOiB0cnVlfSovXG5cbi8qIFRoZSBmb2xsb3dpbmcgc2hvdWxkIG5vdCBiZSByZW5hbWVkICovXG4ubHRyeyBkaXNwbGF5OiBpbmxpbmUtZmxleDt9XG5cbi8qIEJ1dCB0aGVzZSBzaG91bGQgKi9cbi5yaWdodHsgZGlzcGxheTogaW5saW5lLWZsZXg7fVxuLmxlZnQgeyBkaXNwbGF5OiBibG9jazt9XG5cbi8qcnRsOmVuZDpvcHRpb25zKi8iXX0= */